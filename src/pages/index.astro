---
import { Image } from "astro:assets";

import Link from "@/components/link.astro";
import MainContent from "@/components/main-content.astro";
import PageSection from "@/components/page-section.astro";
import PageTitle from "@/components/page-title.astro";
import { defaultLocale as locale } from "@/config/i18n.config";
import PageLayout from "@/layouts/page-layout.astro";
import { getCollectionName } from "@/lib/content/get-collection-name";
import { getSingletonName } from "@/lib/content/get-singleton-name";
import { reader } from "@/lib/content/reader";
import { getImageImport } from "@/lib/get-image-import";
import { createI18n } from "@/lib/i18n";

const { t } = await createI18n(locale);

const singleton = getSingletonName("indexPage", locale);
const page = await reader().singletons[singleton].readOrThrow();

const documentTitle = t("IndexPage.meta.title");
const { hero, main } = page;
---

<PageLayout locale={locale} title={documentTitle}>
	<MainContent>
		<PageSection>
			<div>
				<Image alt="" fetchpriority="high" loading="eager" src={getImageImport(hero.image)} />
				<PageTitle>{hero.title}</PageTitle>
				<p>{hero.subtitle}</p>
			</div>
		</PageSection>

		{
			main.sections.map((section) => {
				switch (section.discriminant) {
					case "cardsSection": {
						const { title, cards, variant } = section.value;

						const variants = {
							fluid: "grid-fluid-cols-80",
							"two-columns": "grid-cols-2",
							"three-columns": "grid-cols-3",
							"four-columns": "grid-cols-4",
						};

						return (
							<PageSection>
								<h2>{title}</h2>
								<ul class:list={["grid gap-8", variants[variant]]} role="list">
									{cards.map(async (card) => {
										switch (card.discriminant) {
											case "custom": {
												const { title, image, summary, link } = card.value;

												return (
													<li>
														<article>
															{image ? <Image alt="" src={getImageImport(image)} /> : null}
															<h3>{title}</h3>
															<p>{summary}</p>
															<footer>
																<Link href={link.href}>{link.label}</Link>
															</footer>
														</article>
													</li>
												);
											}

											case "page": {
												const id = card.value.reference;
												const collectionName = getCollectionName("pages", locale);
												const page = await reader().collections[collectionName].readOrThrow(id);
												const { image, summary } = page;

												return (
													<li class="overflow-hidden rounded-md border">
														<article>
															{image ? <Image alt="" src={getImageImport(image)} /> : null}
															<p class="p-2">{summary}</p>
															<footer class="flex justify-end">
																<Link href={`/${id}`} class="m-2 rounded-md border p-2">
																	{card.value.link.label}
																</Link>
															</footer>
														</article>
													</li>
												);
											}

											default: {
												return null;
											}
										}
									})}
								</ul>
							</PageSection>
						);
					}

					default: {
						return null;
					}
				}
			})
		}
	</MainContent>
</PageLayout>
